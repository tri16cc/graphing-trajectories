# -*- coding: utf-8 -*-
"""
Created on Tue Dec 11 10:15:32 2018

@author: Trinidad Castillo
"""

from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection, Line3DCollection
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
#ax2 = fig.add_subplot(111, projection='3d')

#PARA UNA PIRAMIDE DE BASE RECTANGULAR
"""
# vertices of a pyramid
v = np.array([[-1, -1, -1], #v[0]
              [1, -1, -1], #v[1]
              [1, 1, -1], #v[2]
              [-1, 1, -1], #v[3]
              [0, 0, -2]]) #v[4]

ax.scatter3D(v[:, 0], v[:, 1], v[:, 2])

# generate list of sides' polygons of our pyramid
verts = [ [v[0],v[1],v[4]],
          [v[0],v[3],v[4]],
          [v[2],v[1],v[4]],
          [v[2],v[3],v[4]],
          [v[0],v[1],v[2],v[3]]]
"""
#PARA UNA PIRAMIDE DE BASE TRIANGULAR
"""
v = np.array([[1, -1, -1], #v[0]
              [1, 1, -1], #v[1]
              [-1, 1, -1], #v[2]
              [0, 0, 1]]) #v[3]

ax.scatter3D(v[:, 0], v[:, 1], v[:, 2])

# generate list of sides' polygons of our pyramid
verts = [ [v[0],v[1],v[3]],
          [v[0],v[2],v[3]],
          [v[1],v[2],v[3]],
          [v[0],v[1],v[2]]]
"""
#EJEMPLO PARA 3 NEEDLES
"""
v = np.array([[-119.5037579,  -115.36011515, -944.52962352], #v[0]
              [-114.07800378, -122.0185057,  -956.22655749], #v[1]
              [-118.00648661, -115.04101155, -960.69477464], #v[2]

              [ -51.81599414,  -25.89100708, -943.24303368], #v[3]
              [ -43.26938473,  -31.08287261, -960.56354175], #v[4]
              [ -60.36260355,  -20.69914155, -960.56354175]]) #v[5]

ax.scatter3D(v[:, 0], v[:, 1], v[:, 2])

# generate list of sides' polygons of our pyramid
verts = [ [v[0],v[1],v[2]],
          [v[0],v[2],v[5], v[3]],
          [v[1],v[4],v[5], v[2]],
          [v[3], v[4], v[5]],
          [v[0],v[1],v[4], v[3]]]

collection = Poly3DCollection(verts, linewidths=1, edgecolors='black', alpha=0.2)
face_color = "aquamarine"
collection.set_facecolor(face_color)
ax.add_collection3d(collection)


v2 = np.array([[-119.5037579,  -115.36011515, -944.52962352], #v[0]
              [-114.07800378, -122.0185057,  -956.22655749], #v[1]
              [-118.00648661, -115.04101155, -960.69477464], #v[2]

              [ -51.81599414,  -25.89100708, -943.24303368], #v[3]
              [ -43.26938473,  -31.08287261, -960.56354175], #v[4]
              [ -60.36260355,  -20.69914155, -960.56354175]]) #v[5]

ax2.scatter3D(v2[:, 0], v2[:, 1], v2[:, 2])

# generate list of sides' polygons of our pyramid
verts2 = [ [v[0],v[1],v[2]],
          [v[0],v[2],v[5], v[3]],
          [v[1],v[4],v[5], v[2]],
          [v[3], v[4], v[5]],
          [v[0],v[1],v[4], v[3]]]

collection2 = Poly3DCollection(verts2, linewidths=1, edgecolors='black', alpha=0.2)
face_color2 = [1, 1, 1]
collection.set_facecolor(face_color2)
ax2.add_collection3d(collection2)


#plt.tight_layout()
plt.show()

"""
#PARA DOS VOLUMENES EN EL MISMO GRAFICO
#PARA UNA PIRAMIDE DE BASE RECTANGULAR
"""
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# vertices of a pyramid
v = np.array([[-1, -1, -1], #v[0]
              [1, -1, -1], #v[1]
              [1, 1, -1], #v[2]
              [-1, 1, -1], #v[3]
              [0, 0, 1]]) #v[4]

ax.scatter3D(v[:, 0], v[:, 1], v[:, 2])

t = np.array([[-1, -1, -1], #v[0]
              [1, -1, -1], #v[1]
              [1, 1, -1], #v[2]
              [-1, 1, -1], #v[3]
              [0, 0, 2]]) #v[4]

ax.scatter3D(v[:, 0], v[:, 1], v[:, 2])
ax.scatter3D(t[:, 0], t[:, 1], t[:, 2])


# generate list of sides' polygons of our pyramid
verts = [ [v[0],v[1],v[4]],
          [v[0],v[3],v[4]],
          [v[2],v[1],v[4]],
          [v[2],v[3],v[4]],
          [v[0],v[1],v[2],v[3]],
          [t[0],t[1],t[4]],
          [t[0],t[3],t[4]],
          [t[2],t[1],t[4]],
          [t[2],t[3],t[4]],
          [t[0],t[1],t[2],t[3]]
          ]


collection = Poly3DCollection(verts, linewidths=1, edgecolors='black', alpha=0.2)
face_color = "aquamarine"
collection.set_facecolor(face_color)
ax.add_collection3d(collection)

plt.show()


"""
#EJEMPLO PARA 5 NEEDLES
"""
#Planned trayectory

p = np.array([[-144.70863101, -33.32654023, -1098.88832816], #p[0]
              [-149.969178, -18.24246092, -1086.48015701], #p[1]
              [-155.89005285, -21.67872293, -1078.74752773], #p[2]
              [-156.24165565, -44.28886924, -1060.75708391], #p[3]
              [-152.65669137, -53.07220511, -1092.28357803], #p[4]


              [-46.79794737, -30.4821252, -1019.8614917], #p[5]
              [-55.92692704, -11.40747771, -1009.58501575], #p[6]
              [-69.76160181, -18.56203255, -991.97250531], #p[7]
              [-69.18292136, -42.0584381, -991.36385119], #p[8]
              [-54.99060242, -49.4254605, -1008.60019269]]) #p[9]

ax.scatter3D(p[:, 0], p[:, 1], p[:, 2])

x = np.array([[-144.70863101], [-149.969178], [-155.89005285], [-156.24165565], [-152.65669137],[-46.79794737],[-55.92692704],[-69.76160181],[-69.18292136],[-54.99060242]])
y = np.array([[-33.32654023], [-18.24246092], [ -21.67872293], [-44.28886924], [-53.07220511],[-30.4821252],[-11.40747771],[-18.56203255],[-42.0584381],[-49.4254605]])
z = np.array([[-1098.88832816], [ -1086.48015701], [-1078.74752773], [-1060.75708391], [-1092.28357803],[-1019.8614917],[-1009.58501575],[-991.97250531],[-991.36385119],[-1008.60019269]])

labels = ['PT-EP', 'PT-EP', 'PT-EP', 'PT-EP', 'PT-EP','PT-TP','PT-TP','PT-TP','PT-TP','PT-TP']

x = x.flatten()
y = y.flatten()
z = z.flatten()

ax.scatter(x, y, z)
#give the labels to each point
for x, y, z, label in zip(x, y,z, labels):
    ax.text(x, y, z, label)

# Validation 

v = np.array([[-134.85925293, -31.75648499, -1087.99938965], #v[0]
                [-136.88926697, -14.46294022, -1072.25891113], #v[1]
                [-138.96415222, -21.06623441, -1062.76603818], #v[2]
                [-143.31542534, -45.94221079, -1052.43246193], #v[3]
                [-134.76943994, -52.1731559, -1076.53046644], #v[4]

                [-34.10387421, -28.54125595, -1006.08172607], #v[5]
                [-40.03656793, -8.79592699, -994.78931147], #v[6]
                [-48.28832567, -17.78498912, -978.39063251], #v[7]
                [-51.56776404, -47.69198403, -977.1163654 ], #v[8]
                [-38.69532394, -49.99339294, -996.80560303]]) #v[9]

ax.scatter3D(v[:, 0], v[:, 1], v[:, 2])

# generate list of sides' polygons of our pyramid
verts = [
        [p[0],p[1],p[2],p[3],p[4]],
          [p[0],p[1],p[6], p[5]],
          [p[1],p[2],p[7], p[6]],
          [p[2],p[3],p[8], p[7]],
          [p[3],p[4],p[9], p[8]],
          [p[4],p[0],p[5], p[9]],
          [p[5],p[6],p[7], p[8], p[9]],

          [v[0], v[1], v[2], v[3], v[4]],
          [v[0], v[1], v[6], v[5]],
          [v[1], v[2], v[7], v[6]],
          [v[2], v[3], v[8], v[7]],
          [v[3], v[4], v[9], v[8]],
          [v[4], v[0], v[5], v[9]],
          [v[5], v[6], v[7], v[8], v[9]]]
"""
#EJEMPLO PARA 4 NEEDLES
#Planned trayectory

p = np.array([[-43.11150999, -118.14365791, -1100.99389988],
                [-27.97693445,-124.54828379, -1089.54038197],
                [-55.99892873, -120.42384095, -1084.32576297],
                [-40.75143664, -133.41566716, -1077.33745869],

              [-43.2165748, -34.770722, -1030.85272686],
              [-27.89568594, -43.06953117, -1021.03437003],
              [-56.072327, -44.66085799, -1019.15166512],
              [-40.75143814, -52.95966716, -1009.3333083]])

ax.scatter3D(p[:, 0], p[:, 1], p[:, 2])

x = np.array([[-43.11150999], [-27.97693445], [-55.99892873], [-40.75143664], [-43.2165748],[-27.89568594],[-56.072327],[-40.75143814]])
y = np.array([[-118.14365791], [-124.54828379], [-120.42384095], [-133.41566716], [-34.770722],[-43.06953117],[-44.66085799],[-52.95966716]])
z = np.array([[-1100.99389988], [-1089.54038197], [-1084.32576297], [-1077.33745869], [-1030.85272686],[-1021.03437003],[-1019.15166512],[-1009.3333083]])

labels = ['PT-EP-1n', 'PT-EP-2n', 'PT-EP-3n', 'PT-EP-4n', 'PT-TP-1n','PT-TP-2n','PT-TP-3n','PT-TP-4n']

x = x.flatten()
y = y.flatten()
z = z.flatten()

ax.scatter(x, y, z)
#give the labels to each point
for x, y, z, label in zip(x, y,z, labels):
    ax.text(x, y, z, label)

# Validation

v = np.array([[-37.46400833, -111.66519458, -1110.49853516],
                [-30.06354475, -118.41068715, -1088.32654989],
                [-54.11559701, -115.22785772, -1079.9576416],
                [-36.32798991, -131.97297926, -1085.86953555],

                [-37.46400647, -34.82519458, -1026.4934082],
                [-25.71179962, -42.38991928, -1016.53521729],
                [-52.57167308, -42.79983533, -1015.73015845],
                [-41.41337791, -52.50604791, -1005.22696609]])

#ax.scatter3D(v[:, 0], v[:, 1], v[:, 2])


#Adding labels for planned trajectory

#
# x2 = np.array([[-37.46400833], [-30.06354475], [-54.11559701], [-36.32798991], [-37.46400647], [-25.71179962],[-52.57167308],[-41.41337791]])
# y2 = np.array([[-111.66519458], [-118.41068715], [-115.22785772], [-131.97297926], [-34.82519458],[-42.38991928],[-42.79983533],[-52.50604791]])
# z2 = np.array([[-1110.49853516], [-1088.32654989], [-1079.9576416], [-1085.86953555], [-1026.4934082],[-1016.53521729],[-1015.73015845],[-1005.22696609]])
#
# labels2= ['VT-EP-1n', 'VT-EP-2n', 'VT-EP-3n','VT-EP-4n', 'VT-TP-1n', 'VT-TP-2n', 'VT-TP-3n', 'VT-TP-4n']
#
# x2 = x2.flatten()
# y2 = y2.flatten()
# z2 = z2.flatten()
#
# ax.scatter(x2, y2, z2)
#
# #give the labels to each point
# for x2, y2, z2, label2 in zip(x2, y2,z2, labels2):
#     ax.text(x2, y2, z2, label2)

# generate list of sides' polygons of our pyramid
verts = [[p[0],p[1],p[2],p[3]],
          [p[1],p[2],p[6],p[5]],
          [p[2],p[3],p[7],p[6]],
          [p[3],p[0],p[4],p[7]],
          [p[0],p[1],p[5],p[4]],
          [p[4],p[5],p[6],p[7]],

          # [v[0],v[1],v[2],v[3]],
          # [v[1],v[2],v[6],v[5]],
          # [v[2],v[3],v[7],v[6]],
          # [v[3],v[0],v[4],v[7]],
          # [v[0],v[1],v[5],v[4]],
          # [v[4],v[5],v[6],v[7]]
         ]

#EJEMPLO PARA 6 NEEDLES
"""
#Planned trayectory

# p = np.array([[ -165.55200671,    28.69049854, -1029.39208984],
#                 [ -178.17520676,    55.08110211, -1055.47445556],
#                 [ -206.15200671,    39.24649854, -1035.79248047],
#                 [ -213.46000671,    53.05049854, -1020.59155273],
#                 [ -178.47406187,    69.76595634, -1041.56838917],
#                 [ -192.58015319,    51.24923794, -1019.93090303],
# 
# 
#                 [  -61.29442718,    24.40480737, -1025.12422137],
#                 [  -59.99200671,    50.61449854, -1048.59326172],
#                 [  -60.66383753,    38.80307094, -1038.99117356],
#                 [  -60.9441759 ,    52.68192613, -1024.5932991 ],
#                 [  -59.99200671,    58.73449854 ,-1037.39257812],
#                 [  -61.57476554,    38.28366256, -1010.72634692]]) #p[9]
# 
# ax.scatter3D(p[:, 0], p[:, 1], p[:, 2])


# x = np.array([[-165.55200671], [-178.17520676], [-178.47406187], [-192.58015319], [-206.15200671],[-213.46000671],
#               [ -61.29442718],[ -59.99200671],[-59.99200671],[-61.57476554],[-60.66383753],[ -60.9441759]])
#
# y = np.array([[28.69049854], [55.08110211], [ 69.76595634], [51.24923794], [39.24649854],[53.05049854],
#               [24.40480737],[50.61449854],[58.73449854],[38.28366256],[38.80307094],[52.68192613]])
#
# z = np.array([[-1029.39208984], [ -1055.47445556], [-1041.56838917], [-1019.93090303], [-1035.79248047],[-1020.59155273],
#               [ -1025.12422137],[-1048.59326172],[-1037.39257812],[-1010.72634692],[-1038.99117356],[-1024.5932991]])
#
# labels = ['PT-EP1', 'PT-EP2', 'PT-EP3', 'PT-EP4', 'PT-EP5', 'PT-EP6', 'PT-TP1','PT-TP2','PT-TP3','PT-TP4','PT-TP5',
#           'PT-TP6']
#
# x = x.flatten()
# y = y.flatten()
# z = z.flatten()
#
# ax.scatter(x, y, z)
# #give the labels to each point
# for x, y, z, label in zip(x, y,z, labels):
#     ax.text(x, y, z, label)

# Validation

# v = np.array([[ -190.78356814,    32.93358731, -1025.6130349 ],
#                 [ -178.76022595,    52.58203813, -1039.10944021],
#                 [ -172.93703151,    68.00409269, -1039.20021534],
#                 [ -181.14398193,    48.51124573, -1024.03686523],
#                 [ -183.17745972 ,   43.0756073 , -1024.15368652],
#                 [ -181.80486643,    52.45860243, -1020.30727062],
# 
#                 [ -116.60128784,    34.07384491, -1017.22161865],
#                 [  -95.83619559,    58.80249906, -1029.60002369],
#                 [  -99.12957001,    57.64379883, -1030.58618164],
#                 [ -104.43691254,   41.10617065 ,-1018.08642578],
#                 [ -100.97050452,    51.00831234, -1017.08644906],
#                 [ -102.99209595 ,   55.92642212, -1018.04437256]]) #v[9]

#ax.scatter3D(v[:, 0], v[:, 1], v[:, 2])


#for 6 needles

#generate list of sides' polygons of our pyramid
verts =[[p[0],p[1],p[2],p[3],p[4],p[5]],
          # [p[0],p[1],p[7],p[6]],
          # [p[1],p[2],p[8],p[7]],
          # [p[2],p[3],p[9],p[8]],
          # [p[3],p[4],p[10],p[9]],
          # [p[4],p[5],p[11],p[10]],
          # [p[5],p[0],p[6],p[11]],
          [p[6],p[7],p[8],p[9],p[10],p[11]],

          # [v[0],v[1],v[2],v[3],v[4],v[5]],
          # [v[0],v[1],v[7],v[6]],
          # [v[1],v[2],v[8],v[7]],
          # [v[2],v[3],v[9],v[8]],
          # [v[3],v[4],v[10],v[9]],
          # [v[4],v[5],v[11],v[10]],
          # [v[5],v[0],v[6],v[11]],
          # [v[6],v[7],v[8],v[9],v[10],v[11]]
        ]

"""

collection = Poly3DCollection(verts, linewidths=1, edgecolors='black', alpha=0.2, zsort='min')
face_color = "salmon"
collection.set_facecolor(face_color)
ax.add_collection3d(collection)

plt.show()